@startuml
class org.example.prog_meth_project.application.NotationQueue {
- NotationStack notationStack
+ <<Create>> NotationQueue(NotationStack)
+ void setNotationStack(NotationStack)
+ boolean add(Notation)
+ Notation poll()
}


class org.example.prog_meth_project.page.MirrorRubikPage {
- StackPane root
- Group world
- Group axisGroup
- PerspectiveCamera camera
- Xform cameraXform
- double startDragX
- double startDragY
- RubikFROOK rubikSolver
- AtomicBoolean hasStartedSolving
- AtomicBoolean isSolving
- BaseRubik rubik
- NotationStack notationStack
- NotationQueue notationQueue
- VBox scene
+ SubScene subScene3DView
+ <<Create>> MirrorRubikPage()
+ AtomicBoolean getIsSolving()
+ AtomicBoolean getHasStartedSolving()
+ NotationQueue getNotationQueue()
+ BaseRubik getRubik()
+ RubikFROOK getRubikSolver()
+ Group getWorld()
+ StackPane getRoot()
+ PerspectiveCamera getCamera()
+ Xform getCameraXform()
+ Group getAxisGroup()
+ NotationStack getNotationStack()
+ double getStartDragX()
+ double getStartDragY()
+ SubScene getSubScene3DView()
+ void setScene(VBox)
+ void setSubScene3DView(SubScene)
+ void setStartDragX(double)
+ void setStartDragY(double)
+ VBox getScene()
}


class org.example.prog_meth_project.model.Cubelet {
- Group mainBox
+ <<Create>> Cubelet(double,double,double,int,int,int)
- void setMaterialOfBox(Box)
- Box makeXBorder(double,double,double,int,int)
- Box makeYBorder(double,double,double,int,int)
- Box makeZBorder(double,double,double,int,int)
+ Affine getAffine()
+ void setAffine(Affine)
+ Box buildFront(double,double,double,Color)
+ Box buildBack(double,double,double,Color)
+ Box buildTop(double,double,double,Color)
+ Box buildBottom(double,double,double,Color)
+ Box buildLeft(double,double,double,Color)
+ Box buildRight(double,double,double,Color)
}


class org.example.prog_meth_project.component.NotationStack {
- ArrayDeque<String> deque
- ArrayDeque<String> futureDeque
+ <<Create>> NotationStack()
+ Text getNodeText(int)
+ void update(Notation,Queue<Notation>)
+ ArrayDeque<String> getDeque()
+ ArrayDeque<String> getFutureDeque()
+ void update()
+ void add(Notation)
+ void poll()
}


class org.example.prog_meth_project.rendering.Rotation {
- Rotate rotate
- double angle
- Cubelet cubelet
- ArrayList<RotateListener> listeners
+ <<Create>> Rotation(Cubelet,Notation)
+ Double getValue()
+ void setValue(Double)
+ void addListener(RotateListener)
+ void setAngle(double)
}


interface org.example.prog_meth_project.rendering.Rotation$RotateListener {
+ void onAngleChanges(Cubelet,Rotate,double,double)
}

class org.example.prog_meth_project.config.Config {
+ {static} double CUBELET_BORDER_WIDTH
+ {static} Color CUBELET_INSIDE_COLOR
+ {static} Color CUBELET_BORDER_COLOR
+ {static} double DRAG_SENSITIVITY
+ {static} double RUBIK_MENU_RATIO
+ {static} double SECOND_PER_NOTATION
+ {static} double AXIS_LENGTH
+ {static} double INIT_SUBSCENE_WIDTH
+ {static} double INIT_SUBSCENE_HEIGHT
}

class org.example.prog_meth_project.config.Config$Mirror {
+ {static} double CUBELET_MEDIUM_LENGTH
+ {static} double CUBELET_DISTANCE
+ {static} double CUBELET_GROWING_RATIO_VERTICAL
+ {static} double CUBELET_GROWING_RATIO_HORIZONTAL
}

class org.example.prog_meth_project.config.Config$Standard {
+ {static} double CUBELET_LENGTH
+ {static} double CUBELET_DISTANCE
}

class org.example.prog_meth_project.config.Config$Camera {
+ {static} double CAMERA_INITIAL_DISTANCE
+ {static} double CAMERA_INITIAL_X_ANGLE
+ {static} double CAMERA_INITIAL_Y_ANGLE
+ {static} double CAMERA_INITIAL_Z_ANGLE
+ {static} double CAMERA_NEAR_CLIP
+ {static} double CAMERA_FAR_CLIP
}

enum org.example.prog_meth_project.rendering.Axis {
+  X_AXIS
+  Y_AXIS
+  Z_AXIS
- Point3D point3D
~ <<Create>> Axis(Point3D)
+ Point3D toPoint3D()
}


class org.example.prog_meth_project.page.StandardRubikPage {
- StackPane root
- Group world
- Group axisGroup
- PerspectiveCamera camera
- Xform cameraXform
- double startDragX
- double startDragY
- RubikFROOK rubikSolver
- AtomicBoolean hasStartedSolving
- AtomicBoolean isSolving
- BaseRubik rubik
- NotationStack notationStack
- NotationQueue notationQueue
- VBox scene
+ SubScene subScene3DView
+ <<Create>> StandardRubikPage()
+ NotationStack getNotationStack()
+ NotationQueue getNotationQueue()
+ double getStartDragX()
+ AtomicBoolean getIsSolving()
+ Group getWorld()
+ Group getAxisGroup()
+ RubikFROOK getRubikSolver()
+ Xform getCameraXform()
+ StackPane getRoot()
+ double getStartDragY()
+ AtomicBoolean getHasStartedSolving()
+ SubScene getSubScene3DView()
+ PerspectiveCamera getCamera()
+ BaseRubik getRubik()
+ void setScene(VBox)
+ void setStartDragY(double)
+ void setStartDragX(double)
+ void setSubScene3DView(SubScene)
+ VBox getScene()
}


interface org.example.prog_meth_project.page.RubikPage {
+ VBox getScene()
+ AtomicBoolean getHasStartedSolving()
+ NotationQueue getNotationQueue()
+ BaseRubik getRubik()
+ RubikFROOK getRubikSolver()
+ AtomicBoolean getIsSolving()
+ Group getWorld()
+ Pane getRoot()
+ Camera getCamera()
+ Xform getCameraXform()
+ Group getAxisGroup()
+ NotationStack getNotationStack()
+ double getStartDragX()
+ double getStartDragY()
+ void setStartDragX(double)
+ void setStartDragY(double)
+ SubScene getSubScene3DView()
+ void setScene(VBox)
+ void setSubScene3DView(SubScene)
~ Text buildAnglesText()
~ void setAnglesText(Text)
~ void build3DSubScene(double,double)
~ void createScene()
~ Button buildSolveButton()
~ GridPane buildMenus()
~ void buildMenu(GridPane)
~ Button notationButton(Notation)
~ void buildRubik()
~ void buildCamera()
~ void buildAxes()
}

class org.example.prog_meth_project.application.Main {
+ SubScene currentScene
+ TabPane root
+ StandardRubikPage standardRubikPage
+ MirrorRubikPage mirrorRubikPage
+ void bindSubSceneSize(RubikPage)
+ void start(Stage)
+ {static} void main(String[])
}


class org.example.prog_meth_project.component.RubikMenu {
+ <<Create>> RubikMenu()
}

class org.example.prog_meth_project.model.StandardRubik {
+ <<Create>> StandardRubik()
# Cubelet createCubelet(int,int,int)
+ ArrayList<Cubelet> getSideOfNotation(Notation)
+ ArrayList<Cubelet> getSideAny(int,Axis)
+ ArrayList<Cubelet> getSideX(int)
+ ArrayList<Cubelet> getSideY(int)
+ ArrayList<Cubelet> getSideZ(int)
# void swapFromNotation(Notation,Map.Entry<Integer,Integer>,Map.Entry<Integer,Integer>)
# void swapCorners(Notation)
# void swapEdges(Notation)
# void swapThreeTimes(Notation,Map.Entry<Integer,Integer>[])
+ void call(Notation)
# void swapRubikMatrix(int,int,int,int,int,int)
}

enum org.example.prog_meth_project.application.Notation {
+  R
+  R_
+  L
+  L_
+  F
+  F_
+  B
+  B_
+  U
+  U_
+  D
+  D_
+ boolean isInverted
+ Axis axis
+ int direction
~ <<Create>> Notation(boolean,Axis,int)
+ String toPrettyString()
+ {static} Notation stringToNotation(String)
+ int rotatingDirection()
}


class org.example.prog_meth_project.rendering.Xform {
+ Translate t
+ Translate p
+ Translate ip
+ Rotate rx
+ Rotate ry
+ Rotate rz
+ Scale s
+ <<Create>> Xform()
+ <<Create>> Xform(RotateOrder)
+ void setTranslate(double,double,double)
+ void setTranslate(double,double)
+ void setTx(double)
+ void setTy(double)
+ void setTz(double)
+ void setRotate(double,double,double)
+ void setRotateX(double)
+ void setRotateY(double)
+ void setRotateZ(double)
+ void setRy(double)
+ void setRz(double)
+ void setScale(double)
+ void setSx(double)
+ void setSy(double)
+ void setSz(double)
+ void setPivot(double,double,double)
+ void reset()
+ void resetTSP()
+ void debug()
}


enum org.example.prog_meth_project.rendering.RotateOrder {
+  XYZ
+  XZY
+  YXZ
+  YZX
+  ZXY
+  ZYX
}

class org.example.prog_meth_project.application.RubikAnimationThread {
- {static} boolean isPTRunning
- ParallelTransition pt
- NotationQueue notationQueue
- AtomicBoolean isSolving
- AtomicBoolean startSolving
- RubikFROOK rubikFROOK
- BaseRubik rubik
+ <<Create>> RubikAnimationThread(NotationQueue,AtomicBoolean,AtomicBoolean,RubikFROOK,BaseRubik)
+ void run()
- {static} Timeline buildCubeletTimeline(Cubelet,Notation)
- void callNotation(Notation)
}


abstract class org.example.prog_meth_project.model.BaseRubik {
# ArrayList<ArrayList<ArrayList<Cubelet>>> rubikObjectMatrix
+ <<Create>> BaseRubik()
+ ArrayList<ArrayList<ArrayList<Cubelet>>> getObjectMatrix()
# {abstract}Cubelet createCubelet(int,int,int)
+ ArrayList<Cubelet> getSideOfNotation(Notation)
+ ArrayList<Cubelet> getSideAny(int,Axis)
+ {abstract}ArrayList<Cubelet> getSideX(int)
+ {abstract}ArrayList<Cubelet> getSideY(int)
+ {abstract}ArrayList<Cubelet> getSideZ(int)
# {abstract}void swapFromNotation(Notation,Map.Entry<Integer,Integer>,Map.Entry<Integer,Integer>)
# {abstract}void swapCorners(Notation)
# {abstract}void swapEdges(Notation)
# {abstract}void swapThreeTimes(Notation,Map.Entry<Integer,Integer>[])
+ {abstract}void call(Notation)
# {abstract}void swapRubikMatrix(int,int,int,int,int,int)
}


class org.example.prog_meth_project.model.MirrorRubik {
+ <<Create>> MirrorRubik()
# Point3D getLengthOfCubeletAt(int,int,int)
# Cubelet createCubelet(int,int,int)
+ ArrayList<Cubelet> getSideOfNotation(Notation)
+ ArrayList<Cubelet> getSideAny(int,Axis)
+ ArrayList<Cubelet> getSideX(int)
+ ArrayList<Cubelet> getSideY(int)
+ ArrayList<Cubelet> getSideZ(int)
# void swapFromNotation(Notation,Map.Entry<Integer,Integer>,Map.Entry<Integer,Integer>)
# void swapCorners(Notation)
# void swapEdges(Notation)
# void swapThreeTimes(Notation,Map.Entry<Integer,Integer>[])
+ void call(Notation)
# void swapRubikMatrix(int,int,int,int,int,int)
}



java.util.LinkedList <|-- org.example.prog_meth_project.application.NotationQueue
org.example.prog_meth_project.page.RubikPage <|.. org.example.prog_meth_project.page.MirrorRubikPage
javafx.scene.Group <|-- org.example.prog_meth_project.model.Cubelet
org.example.prog_meth_project.component.VBox <|-- org.example.prog_meth_project.component.NotationStack
javafx.beans.value.WritableValue <|.. org.example.prog_meth_project.rendering.Rotation
org.example.prog_meth_project.rendering.Rotation +.. org.example.prog_meth_project.rendering.Rotation$RotateListener
org.example.prog_meth_project.config.Config +.. org.example.prog_meth_project.config.Config$Mirror
org.example.prog_meth_project.config.Config +.. org.example.prog_meth_project.config.Config$Standard
org.example.prog_meth_project.config.Config +.. org.example.prog_meth_project.config.Config$Camera
org.example.prog_meth_project.page.RubikPage <|.. org.example.prog_meth_project.page.StandardRubikPage
javafx.application.Application <|-- org.example.prog_meth_project.application.Main
javafx.scene.control.MenuBar <|-- org.example.prog_meth_project.component.RubikMenu
org.example.prog_meth_project.model.BaseRubik <|-- org.example.prog_meth_project.model.StandardRubik
javafx.scene.Group <|-- org.example.prog_meth_project.rendering.Xform
org.example.prog_meth_project.application.Thread <|-- org.example.prog_meth_project.application.RubikAnimationThread
javafx.scene.Group <|-- org.example.prog_meth_project.model.BaseRubik
org.example.prog_meth_project.model.BaseRubik <|-- org.example.prog_meth_project.model.MirrorRubik
@enduml