@startuml
class com.ggFROOK.RubikFROOK {
- ArrayList<Notation> solution
- int[][] directions
- Notation[] faceToNotation
- int[][] rubik
- boolean detailPrintOption
+ boolean countMovesOption
- Map<Notation,Map.Entry<Integer,Integer>> faceAndDirOfNotation
+ int[][] getRubik()
+ void initRubik()
- int findIndex(int[],int)
- int[][] createClonedRubik()
- void rotateClockwise(int,int)
- void rotateAntiClockwise(int,int)
- void addToSolution(Notation)
+ void call(String,boolean)
+ void call(Notation)
+ void call(Notation,boolean)
- void rotateTo(int,int,Notation)
- void cross()
- void corner()
- void edge()
- void OLL()
- void PLL()
- boolean checkPLL()
- boolean checkOLL()
- boolean checkEdge()
+ boolean checkCross()
- boolean checkCorner()
+ ArrayList<Notation> getSolution()
- void unimportantPrint(String)
- void solve()
+ ArrayList<Notation> mainSolving()
- void optimizeSolution()
- boolean handleReplace(ArrayList<Notation>,int)
+ void mainSolving(String[],boolean,boolean)
+ void printRubik(int[][])
- void unimportantPrintRubik(int[][])
+ {static} void main(String[])
- String solutionToString()
}


class com.ggFROOK.InvalidRubikNotation {
+ <<Create>> InvalidRubikNotation(String)
+ <<Create>> InvalidRubikNotation()
}

enum com.ggFROOK.Notation {
+  R
+  R_
+  L
+  L_
+  F
+  F_
+  B
+  B_
+  U
+  U_
+  D
+  D_
- boolean isInverted
- Notation oppositeNotation
~ <<Create>> Notation(boolean)
+ boolean isInverted()
+ boolean isOpposite(Notation)
+ Notation toggle()
}




com.ggFROOK.Exception <|-- com.ggFROOK.InvalidRubikNotation
@enduml